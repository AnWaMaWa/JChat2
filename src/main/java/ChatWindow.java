import ChatCommands.CommandList;
import MessageObserver.ISubscribe;
import MessageObserver.Message;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import couchdb.ISendMessage;
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;

import javax.swing.*;
import javax.swing.text.BadLocationException;
import javax.swing.text.Document;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;


/**
 * Created by awaigand on 09.04.2015.
 */
public class ChatWindow extends JPanel implements ISubscribe {
    private static final String COMMAND_PREFIX = "\\";
    private JTextField messageInput;
    private JScrollPane scrollPane1;
    private JTextPane messagePane;
    private JPanel rootPane;
    private JButton historyYesterday;
    private JButton history1Hour;
    private JButton historyWeek;
    private JButton historyMonth;
    private JButton historyEver;
    final private ISendMessage messageSender;
    final private CommandList commandList;
    private HistoryFrameFactory hf;

    public JPanel getMainPane() {
        return rootPane;
    }

    public ChatWindow(final ISendMessage messageSender, final HistoryFrameFactory hf, CommandList cl, String title) {
        super();
        this.commandList = cl;
        this.hf = hf;
        this.messageSender = messageSender;

        messageInput.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                processInput(messageInput.getText());
                messageInput.setText("");
            }
        });
        historyYesterday.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {

                HistoryFrame hist = hf.buildHistoryFrame(new DateTime(DateTimeZone.UTC).minusDays(1));
                hist.setVisible(true);
            }
        });
        historyEver.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                HistoryFrame hist = hf.buildHistoryFrame(new DateTime(2015, 3, 1, 0, 0, DateTimeZone.UTC));
                hist.setVisible(true);
            }
        });
        historyMonth.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                HistoryFrame hist = hf.buildHistoryFrame(new DateTime(DateTimeZone.UTC).minusMonths(1));
                hist.setVisible(true);
            }
        });
        history1Hour.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                HistoryFrame hist = hf.buildHistoryFrame(new DateTime(DateTimeZone.UTC).minusHours(1));
                hist.setVisible(true);
            }
        });
        historyWeek.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                HistoryFrame hist = hf.buildHistoryFrame(new DateTime(DateTimeZone.UTC).minusDays(7));
                hist.setVisible(true);
            }
        });
    }

    private Thread messageSenderThreadFactory(final String message) {
        return new Thread() {
            public void run() {
                messageSender.sendMessage(message);
            }
        };
    }

    private void processInput(String input) {
        if (input.startsWith(COMMAND_PREFIX)) {
            append(commandList.runCommand(input));
        } else {

            messageSenderThreadFactory(input).start();
        }
    }

    private void prepend(String s) {
        try {
            Document doc = messagePane.getDocument();
            doc.insertString(0, s + "\n", null);
        } catch (BadLocationException exc) {
            exc.printStackTrace();
        }
    }

    private void append(String s) {
        try {
            Document doc = messagePane.getDocument();
            doc.insertString(doc.getLength(), s + "\n", null);
        } catch (BadLocationException exc) {
            exc.printStackTrace();
        }
    }

    @Override
    public void notify(Message m) {
        append(m.getUser() + ": " + m.getBody());
    }

    @Override
    public void notify(String m) {
        append(m);
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        rootPane = new JPanel();
        rootPane.setLayout(new GridLayoutManager(2, 2, new Insets(0, 0, 0, 0), -1, -1));
        messageInput = new JTextField();
        messageInput.setText("");
        rootPane.add(messageInput, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, new Dimension(800, 30), null, null, 0, false));
        scrollPane1 = new JScrollPane();
        rootPane.add(scrollPane1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, new Dimension(800, 520), null, null, 0, false));
        messagePane = new JTextPane();
        messagePane.setEditable(false);
        scrollPane1.setViewportView(messagePane);
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(6, 2, new Insets(0, 0, 0, 0), -1, -1));
        rootPane.add(panel1, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        historyYesterday = new JButton();
        historyYesterday.setText("Show History since yesterday");
        panel1.add(historyYesterday, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        panel1.add(spacer1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final Spacer spacer2 = new Spacer();
        panel1.add(spacer2, new GridConstraints(5, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        history1Hour = new JButton();
        history1Hour.setText("Show History since 1 Hour");
        panel1.add(history1Hour, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        historyWeek = new JButton();
        historyWeek.setText("Show History Week");
        panel1.add(historyWeek, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        historyMonth = new JButton();
        historyMonth.setText("Show History Month");
        panel1.add(historyMonth, new GridConstraints(3, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        historyEver = new JButton();
        historyEver.setText("Show History Ever");
        panel1.add(historyEver, new GridConstraints(4, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return rootPane;
    }
}
